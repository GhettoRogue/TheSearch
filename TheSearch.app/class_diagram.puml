@startuml

package "Models" {
    package User{
        class User{
            + login : string
            + password : string
        }
        abstract class UserFactory{
            + {static} CreateUser(login: string, password: string): User
        } 
    }
    
    package Criminal{
        class Criminal{
            + id : Guid
            + firstName : string
            + lastName : string
            + height : int
            + weight : int
            + nationality : string
            + isArrested : boolean
        }   
    }
}

package "IL" {
    package User{
        interface IUserRepository{
            + GetAll() : IEnumerable<User>
        }
        interface IUserSerializer{
            + SerializeUser() : void
            + DeserializeUser() : IEnumerable<User>    
        }
    }
    package Criminal{
        interface ICriminalRepository{
            + GetAll() : IEnumerable<Criminal>
            + GetOnlyArrested() : IEnumerable<Criminal>
            + GetNotArrested() : IEnumerable<Criminal>
        }
        interface ICriminalSerializer{
            + SerializeAllCriminals() : void
            + SerializeArrestedCriminals() : void
            + SerializeNotArrestedCriminals() : void
            
            + DeserializeAllCriminals() : IEnumerable<Criminal>
            + DeserializeOnlyArrested() : IEnumerable<Criminal>
            + DeserializeNotArrested() : IEnumerable<Criminal>
        }
    }
    package Detective{
        interface IDetective{
            + FindCriminalByParameters(height : int, weight: int, nationality: string) : IEnumerable<Criminal>
            + GetArrestedCriminals(criminal : IEnumerable<Criminal>) : IEnumerable<Criminal>
        }
    }
    package Logger{
        interface ILoggerMessage{
            + LoggerSuccess(message : string) : void
            + LoggerError(message : string) : void
        }
    }       
}

package "DAL" {
    package Repository{
        package User{
            class ICriminalRepository{
                - users : User[]
                
                + GetAll : IEnumerable<User>
                - Add(criminal : Criminal) : void
                + Initialize() : void
            }
        }
        package Criminal{
            class ICriminalRepository{
                - criminals : Criminal[]
                
                + GetAll : IEnumerable<Criminal>
                + GetOnlyArrested : IEnumerable<Criminal>
                + GetNotArrested : IEnumerable<Criminal>
                - Add(criminal : Criminal) : void
                + Initialize() : void
            }
        }
    }
    package Logger{
        class DetectiveLog{
            - loggerMessage : ILoggerMessage
            + DetectiveLog(loggerMessage : ILoggerMessage)
            
            + IsAuth(user : User) : boolean
        }
        class LoggerMessages{
            + const SuccessMessage : string
            + const FailureMessage : string
        }
        class LogToFile{
            - const DetectiveLogPath : string
            - {static} Write(message : string)) : void
            
            + LoggerError(message : string) : void
            + LoggerSuccess(message : string) : void
        }
    }
    package Json{
        class JsonContext{
            + const CriminalsPath : string
            + const ArrestedPath : string
            + const NotArrestedPath : string
            + const UserAuthDataPath : string
        }
        class JsonUserDataAccess{
            - userRepository : IUserRepository
            + JsonUserDataAccess(userRepository : IUserRepository)
            
            + SerializeUser() : void
            + DeserializeUser() : IEnumerable<User> 
        }
    }
}

package "BLL" {
    package Criminal{
        class CriminalMessages{
            + const Id : string
            + const FirstName : string
            + const LastName : string
            + const Height : string
            + const Weight : string
            + const Nationality : string
            + const IsArrested : string
        }
    }
    package Detective{
        class DetectiveMessages{
            + const ExitFromMenu : int
            + const EnterChoiceDetective : string
            + const EnterChoiceUser : string
            
            + ... ETC
        }
        class DetectiveTools{
            - repository : ICriminalRepository
            - serializer : ICriminalSerializer
            + DetectiveTools(repository : ICriminalRepository, serializer : ICriminalSerializer)
            
            + FindCriminalByParameters(height : int, weight : int, nationality : nationality) : IEnumerable<Criminal>
            + GetArrestedCriminals(criminal : Criminal)) : IEnumerable<Criminal>
            + GetArrestedPeople : void
            + FindCriminals(height : int, weight : int, nationality : string) : void
            # SearchCriminal() : void
        }
    }
    class Validator{
            + {static} ValidateHeight(height : int) : boolean
            + {static} ValidateWeight(weight : int) : boolean
            + {static} ValidateNationality(nationality : string) : boolean
    }
}

package "VL" {
    class ConsoleHelper{
            - {static} PrintColorLine(message : string, color : ConsoleColor) : void
            
            + {static} UserInput(message : string) : string
            + {static} PrintSuccess(message : string) : void
            + {static} PrintError(message : string) : void
            + {static} PrintWarning(message : string) : void
            + ... ETC
            
    }
    class AppStarter{
            + {static} InitProject : void
    }
    class TheSearchView{
            + {static} ShowMenu : void
            + {static} ShowMenuLogin : void
    }
    class DetectiveView{
            - detectiveTools : DetectiveTools
            + DetectiveView : (detectiveTools : DetectiveTools))
            
            + ShowDetectiveMenu : void 
    }
}



@enduml